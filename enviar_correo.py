from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
import re
from datetime import datetime, date
import threading
import time
import schedule
import random
from enviar_whatsapp import enviar_whatsapp_directo
import webbrowser
import urllib.parse

app = Flask(__name__)
CORS(app)

# Configuraci√≥n del correo
CORREO_ORIGEN = "dantapcon@gmail.com"
CONTRASE√ëA = "tskk jlei hsms hedu"

# Configuraci√≥n de WhatsApp
# Prefijos de pa√≠ses soportados expl√≠citamente
PREFIJOS_PAISES = {
    'ES': '+34',   # Espa√±a
    'EC': '+593',  # Ecuador
    'MX': '+52',   # M√©xico
    'CO': '+57',   # Colombia
    'AR': '+54',   # Argentina
    'PE': '+51',   # Per√∫
    'CL': '+56',   # Chile
    'US': '+1'     # Estados Unidos
}

# Configuraci√≥n de la base de datos
DB_NAME = "cumpleanos.db"

def init_database():
    """Inicializar la base de datos SQLite"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # Crear tabla de contactos
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS contactos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT NOT NULL,
            apellido TEXT NOT NULL,
            correo TEXT UNIQUE NOT NULL,
            celular TEXT,
            fecha_nacimiento DATE NOT NULL,
            fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            ultimo_correo_enviado DATE
        )
    ''')
    
    # Crear tabla de historial de correos
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS historial_correos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            contacto_id INTEGER,
            fecha_envio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            tipo TEXT NOT NULL,
            asunto TEXT,
            mensaje TEXT,
            estado TEXT DEFAULT 'enviado',
            FOREIGN KEY (contacto_id) REFERENCES contactos (id)
        )
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ Base de datos inicializada")

def validar_email(email):
    """Validar formato de email"""
    patron = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(patron, email) is not None

def validar_celular(celular):
    """Validar y formatear n√∫mero de celular"""
    if not celular or celular.strip() == '':
        return True, '', 'No se enviar√° mensaje de WhatsApp (n√∫mero no proporcionado)'
    
    # Limpiar el n√∫mero de espacios, guiones, par√©ntesis
    celular_limpio = re.sub(r'[\s\-()]', '', celular)
    
    # Si ya tiene formato internacional, verificar que sea v√°lido
    if celular_limpio.startswith('+'):
        if not re.match(r'^\+[1-9]\d{6,14}$', celular_limpio):
            return False, '', f'Formato de n√∫mero internacional incorrecto: {celular_limpio}'
        return True, celular_limpio, f'N√∫mero internacional v√°lido: {celular_limpio}'
    
    # Validar por pa√≠s
    if celular_limpio.startswith('09') and len(celular_limpio) >= 9:
        # Ecuador: formato 09xxxxxxxx
        return True, PREFIJOS_PAISES['EC'] + celular_limpio[1:], f'Formato Ecuador: {PREFIJOS_PAISES["EC"] + celular_limpio[1:]}'
    
    elif celular_limpio.startswith('6') or celular_limpio.startswith('7'):
        # Espa√±a: formato 6xxxxxxxx o 7xxxxxxxx
        if len(celular_limpio) != 9:
            return False, '', f'Los n√∫meros de Espa√±a deben tener 9 d√≠gitos: {celular_limpio}'
        return True, PREFIJOS_PAISES['ES'] + celular_limpio, f'Formato Espa√±a: {PREFIJOS_PAISES["ES"] + celular_limpio}'
    
    else:
        # Si no podemos determinar el formato, asumir Espa√±a por defecto
        return True, PREFIJOS_PAISES['ES'] + celular_limpio.lstrip('0'), f'Formato por defecto (Espa√±a): {PREFIJOS_PAISES["ES"] + celular_limpio.lstrip("0")}'

def enviar_correo(destinatario, asunto, mensaje):
    """Funci√≥n para enviar correo electr√≥nico"""
    try:
        msg = MIMEMultipart()
        msg["From"] = CORREO_ORIGEN
        msg["To"] = destinatario
        msg["Subject"] = asunto
        msg.attach(MIMEText(mensaje, "plain"))

        servidor = smtplib.SMTP("smtp.gmail.com", 587)
        servidor.starttls()
        servidor.login(CORREO_ORIGEN, CONTRASE√ëA)
        texto = msg.as_string()
        servidor.sendmail(CORREO_ORIGEN, destinatario, texto)
        servidor.quit()
        
        return True, "Correo enviado exitosamente"
    
    except Exception as e:
        return False, str(e)

def enviar_whatsapp(numero, mensaje):
    """
    Funci√≥n para enviar mensaje de WhatsApp.
    Intenta primero el m√©todo directo (m√°s confiable) y luego pywhatkit como respaldo.
    """
    try:
        print(f"üì± Preparando env√≠o de WhatsApp a {numero}...")
        
        # Usar nuestro m√©todo directo (m√°s confiable)
        return enviar_whatsapp_directo(numero, mensaje, PREFIJOS_PAISES)
        
    except Exception as e:
        print(f"üí• Error al enviar WhatsApp: {str(e)}")
        return False, f"Error al enviar WhatsApp: {str(e)}"

def es_cumpleanos_hoy(fecha_nacimiento):
    """Verificar si una fecha de nacimiento corresponde a hoy"""
    hoy = date.today()
    fecha_nac = datetime.strptime(fecha_nacimiento, '%Y-%m-%d').date()
    return (fecha_nac.month == hoy.month and fecha_nac.day == hoy.day)

def calcular_edad(fecha_nacimiento):
    """Calcular la edad actual"""
    hoy = date.today()
    fecha_nac = datetime.strptime(fecha_nacimiento, '%Y-%m-%d').date()
    edad = hoy.year - fecha_nac.year
    
    if hoy.month < fecha_nac.month or (hoy.month == fecha_nac.month and hoy.day < fecha_nac.day):
        edad -= 1
    
    return edad

def crear_mensaje_cumpleanos(nombre, apellido, edad):
    """Crear mensaje personalizado de cumplea√±os para correo"""
    return f"""¬°Feliz Cumplea√±os {nombre} {apellido}! üéÇ

¬°Esperamos que tengas un d√≠a maravilloso lleno de alegr√≠a y celebraci√≥n!

Hoy cumples {edad} a√±os y queremos desearte:
üéâ Muchas felicidades
üéà Que todos tus deseos se cumplan
üéÅ Un a√±o lleno de √©xitos y bendiciones
‚ù§Ô∏è Salud y prosperidad

¬°Que tengas un cumplea√±os inolvidable!

Con cari√±o,
Sistema Autom√°tico de Cumplea√±os"""

def crear_mensaje_whatsapp(nombre, apellido, edad):
    """Crear mensaje personalizado de cumplea√±os para WhatsApp"""
    return f"""üéÇ *¬°FELIZ CUMPLEA√ëOS {nombre.upper()}!* üéÇ

¬°Hoy cumples *{edad} a√±os* y queremos enviarte nuestros mejores deseos! 

üéâ Que este d√≠a est√© lleno de alegr√≠as y sorpresas
üéÅ Que todos tus sue√±os se cumplan
‚ù§Ô∏è Mucha salud y prosperidad

_Este mensaje fue enviado autom√°ticamente por el Sistema de Cumplea√±os_"""

@app.route('/')
def index():
    """Servir la p√°gina principal"""
    try:
        with open('index.html', 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        return '''
        <!DOCTYPE html>
        <html>
        <head>
            <title>Sistema de Cumplea√±os</title>
            <meta charset="UTF-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; text-align: center; }
                .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
                h1 { color: #333; }
                .status { background: #e8f5e9; padding: 15px; border-radius: 5px; margin: 20px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üéÇ Sistema de Cumplea√±os Autom√°tico</h1>
                <div class="status">
                    <strong>‚úÖ Servidor funcionando</strong><br>
                    Guarda el frontend HTML como <code>index.html</code> en esta carpeta.
                </div>
            </div>
        </body>
        </html>
        '''

@app.route('/registrar-contacto', methods=['POST'])
def registrar_contacto():
    """Registrar un nuevo contacto"""
    print("\nüë§ Nueva solicitud de registro de contacto")
    
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': 'No se recibieron datos'}), 400

        nombre = data.get('nombre', '').strip()
        apellido = data.get('apellido', '').strip()
        correo = data.get('correo', '').strip()
        celular = data.get('celular', '').strip()
        fecha_nacimiento = data.get('fechaNacimiento', '').strip()

        # Validaciones
        if not all([nombre, apellido, correo, fecha_nacimiento]):
            return jsonify({'success': False, 'error': 'Todos los campos son obligatorios'}), 400

        if not validar_email(correo):
            return jsonify({'success': False, 'error': 'Email inv√°lido'}), 400
            
        # Validar y formatear el n√∫mero de celular
        if celular and celular.strip():
            valido, celular_formateado, mensaje_celular = validar_celular(celular)
            if not valido:
                return jsonify({'success': False, 'error': f'N√∫mero de celular inv√°lido: {mensaje_celular}'}), 400
            celular = celular_formateado
            print(f"üì± Celular validado: {mensaje_celular}")

        # Verificar si ya existe el contacto
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM contactos WHERE correo = ?", (correo,))
        if cursor.fetchone():
            conn.close()
            return jsonify({'success': False, 'error': 'Ya existe un contacto con este correo'}), 400

        # Insertar contacto
        cursor.execute("""
            INSERT INTO contactos (nombre, apellido, correo, celular, fecha_nacimiento)
            VALUES (?, ?, ?, ?, ?)
        """, (nombre, apellido, correo, celular, fecha_nacimiento))
        
        contacto_id = cursor.lastrowid
        conn.commit()
        conn.close()

        print(f"‚úÖ Contacto registrado: {nombre} {apellido} ({correo})")

        # Verificar si es cumplea√±os hoy
        if es_cumpleanos_hoy(fecha_nacimiento):
            print("üéÇ ¬°Es cumplea√±os hoy! Enviando mensajes...")
            edad = calcular_edad(fecha_nacimiento)
            asunto = f"¬°Feliz Cumplea√±os {nombre}! üéÇ"
            mensaje_correo = crear_mensaje_cumpleanos(nombre, apellido, edad)
            
            # Enviar correo electr√≥nico
            success_correo, result_correo = enviar_correo(correo, asunto, mensaje_correo)
            
            # Inicializar variables para WhatsApp
            success_whatsapp = False
            result_whatsapp = "No se envi√≥ WhatsApp (celular no proporcionado)"
            
            # Enviar WhatsApp si hay un n√∫mero de celular registrado
            if celular and celular.strip():
                mensaje_whatsapp = crear_mensaje_whatsapp(nombre, apellido, edad)
                success_whatsapp, result_whatsapp = enviar_whatsapp(celular, mensaje_whatsapp)
            
            if success_correo or success_whatsapp:
                # Registrar en historial
                conn = sqlite3.connect(DB_NAME)
                cursor = conn.cursor()
                
                # Registrar el correo enviado
                if success_correo:
                    cursor.execute("""
                        INSERT INTO historial_correos (contacto_id, tipo, asunto, mensaje)
                        VALUES (?, ?, ?, ?)
                    """, (contacto_id, 'correo_cumpleanos', asunto, mensaje_correo))
                
                # Registrar el WhatsApp enviado
                if success_whatsapp:
                    cursor.execute("""
                        INSERT INTO historial_correos (contacto_id, tipo, asunto, mensaje)
                        VALUES (?, ?, ?, ?)
                    """, (contacto_id, 'whatsapp_cumpleanos', 'Mensaje WhatsApp', mensaje_whatsapp))
                
                cursor.execute("""
                    UPDATE contactos SET ultimo_correo_enviado = ? WHERE id = ?
                """, (date.today().isoformat(), contacto_id))
                
                conn.commit()
                conn.close()
                
                mensaje_respuesta = f'¬°Contacto registrado!'
                if success_correo:
                    mensaje_respuesta += f' Correo de cumplea√±os enviado a {nombre}.'
                if success_whatsapp:
                    mensaje_respuesta += f' WhatsApp de cumplea√±os enviado al {celular}.'
                
                return jsonify({
                    'success': True, 
                    'message': mensaje_respuesta + ' üéÇ'
                })
            else:
                return jsonify({
                    'success': False, 
                    'error': f'Contacto registrado, pero error al enviar mensajes: Correo: {result_correo}, WhatsApp: {result_whatsapp}'
                }), 500
        else:
            return jsonify({
                'success': True, 
                'message': f'Contacto {nombre} {apellido} registrado exitosamente. Se enviar√° correo autom√°tico en su cumplea√±os.'
            })

    except Exception as e:
        print(f"üí• Error al registrar contacto: {str(e)}")
        return jsonify({'success': False, 'error': f'Error interno: {str(e)}'}), 500

@app.route('/revisar-cumpleanos', methods=['POST'])
def revisar_cumpleanos():
    """Revisar cumplea√±os de hoy manualmente"""
    print("\nüîç Revisi√≥n manual de cumplea√±os")
    
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # Obtener contactos con cumplea√±os hoy que no hayan recibido correo hoy
        hoy = date.today()
        cursor.execute("""
            SELECT id, nombre, apellido, correo, celular, fecha_nacimiento
            FROM contactos 
            WHERE strftime('%m-%d', fecha_nacimiento) = ?
            AND (ultimo_correo_enviado IS NULL OR ultimo_correo_enviado != ?)
        """, (hoy.strftime('%m-%d'), hoy.isoformat()))
        
        cumplea√±eros = cursor.fetchall()
        conn.close()

        if not cumplea√±eros:
            return jsonify({
                'success': True, 
                'message': 'No hay cumplea√±os pendientes para hoy.'
            })

        enviados = 0
        errores = []

        for contacto in cumplea√±eros:
            contacto_id, nombre, apellido, correo, celular, fecha_nacimiento = contacto
            
            try:
                edad = calcular_edad(fecha_nacimiento)
                asunto = f"¬°Feliz Cumplea√±os {nombre}! üéÇ"
                mensaje_correo = crear_mensaje_cumpleanos(nombre, apellido, edad)
                
                # Enviar correo electr√≥nico
                success_correo, result_correo = enviar_correo(correo, asunto, mensaje_correo)
                
                # Inicializar variables para WhatsApp
                success_whatsapp = False
                result_whatsapp = "No se envi√≥ WhatsApp (celular no proporcionado)"
                
                # Enviar WhatsApp si hay un n√∫mero de celular registrado
                if celular and celular.strip():
                    mensaje_whatsapp = crear_mensaje_whatsapp(nombre, apellido, edad)
                    success_whatsapp, result_whatsapp = enviar_whatsapp(celular, mensaje_whatsapp)
                
                if success_correo or success_whatsapp:
                    # Registrar en historial y actualizar fecha
                    conn = sqlite3.connect(DB_NAME)
                    cursor = conn.cursor()
                    
                    # Registrar el correo enviado
                    if success_correo:
                        cursor.execute("""
                            INSERT INTO historial_correos (contacto_id, tipo, asunto, mensaje)
                            VALUES (?, ?, ?, ?)
                        """, (contacto_id, 'correo_cumpleanos', asunto, mensaje_correo))
                    
                    # Registrar el WhatsApp enviado
                    if success_whatsapp:
                        cursor.execute("""
                            INSERT INTO historial_correos (contacto_id, tipo, asunto, mensaje)
                            VALUES (?, ?, ?, ?)
                        """, (contacto_id, 'whatsapp_cumpleanos', 'Mensaje WhatsApp', mensaje_whatsapp))
                    
                    # Actualizar la fecha de √∫ltimo env√≠o
                    cursor.execute("""
                        UPDATE contactos SET ultimo_correo_enviado = ? WHERE id = ?
                    """, (hoy.isoformat(), contacto_id))
                    
                    conn.commit()
                    conn.close()
                    
                    enviados += 1
                    print(f"‚úÖ Mensajes enviados a {nombre} {apellido}: Correo: {success_correo}, WhatsApp: {success_whatsapp}")
                    
                else:
                    errores.append(f"{nombre} {apellido}: Correo: {result_correo}, WhatsApp: {result_whatsapp}")
                    print(f"‚ùå Error enviando a {nombre}: Correo: {result_correo}, WhatsApp: {result_whatsapp}")
                    
            except Exception as e:
                errores.append(f"{nombre} {apellido}: {str(e)}")
                print(f"üí• Excepci√≥n enviando a {nombre}: {str(e)}")

        # Preparar respuesta
        mensaje_respuesta = f"‚úÖ {enviados} correo(s) de cumplea√±os enviado(s)"
        if errores:
            mensaje_respuesta += f". ‚ùå {len(errores)} error(es): {', '.join(errores[:3])}"
            if len(errores) > 3:
                mensaje_respuesta += "..."

        return jsonify({
            'success': True, 
            'message': mensaje_respuesta
        })

    except Exception as e:
        print(f"üí• Error en revisi√≥n de cumplea√±os: {str(e)}")
        return jsonify({'success': False, 'error': f'Error interno: {str(e)}'}), 500

@app.route('/obtener-contactos', methods=['GET'])
def obtener_contactos():
    """Obtener lista de contactos y estad√≠sticas"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # Obtener todos los contactos
        cursor.execute("""
            SELECT id, nombre, apellido, correo, celular, fecha_nacimiento, fecha_registro
            FROM contactos 
            ORDER BY nombre, apellido
        """)
        contactos_raw = cursor.fetchall()
        
        # Formatear contactos
        contactos = []
        cumpleanos_hoy = 0
        hoy = date.today()
        
        for contacto in contactos_raw:
            contacto_data = {
                'id': contacto[0],
                'nombre': contacto[1],
                'apellido': contacto[2],
                'correo': contacto[3],
                'celular': contacto[4],
                'fecha_nacimiento': contacto[5],
                'fecha_registro': contacto[6]
            }
            
            if es_cumpleanos_hoy(contacto[5]):
                cumpleanos_hoy += 1
            
            contactos.append(contacto_data)
        
        # Estad√≠sticas
        estadisticas = {
            'total': len(contactos),
            'cumpleanos_hoy': cumpleanos_hoy
        }
        
        conn.close()
        
        return jsonify({
            'success': True,
            'contactos': contactos,
            'estadisticas': estadisticas
        })

    except Exception as e:
        print(f"üí• Error obteniendo contactos: {str(e)}")
        return jsonify({'success': False, 'error': f'Error interno: {str(e)}'}), 500

@app.route('/historial', methods=['GET'])
def obtener_historial():
    """Obtener historial de correos enviados"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT h.fecha_envio, c.nombre, c.apellido, c.correo, h.tipo, h.asunto, h.estado
            FROM historial_correos h
            JOIN contactos c ON h.contacto_id = c.id
            ORDER BY h.fecha_envio DESC
            LIMIT 50
        """)
        
        historial_raw = cursor.fetchall()
        conn.close()
        
        historial = []
        for item in historial_raw:
            historial.append({
                'fecha_envio': item[0],
                'nombre_completo': f"{item[1]} {item[2]}",
                'correo': item[3],
                'tipo': item[4],
                'asunto': item[5],
                'estado': item[6]
            })
        
        return jsonify({
            'success': True,
            'historial': historial
        })

    except Exception as e:
        print(f"üí• Error obteniendo historial: {str(e)}")
        return jsonify({'success': False, 'error': f'Error interno: {str(e)}'}), 500

def revisar_cumpleanos_automatico():
    """Funci√≥n que se ejecuta autom√°ticamente para revisar cumplea√±os"""
    print(f"\nüîÑ Revisi√≥n autom√°tica de cumplea√±os - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        hoy = date.today()
        cursor.execute("""
            SELECT id, nombre, apellido, correo, celular, fecha_nacimiento
            FROM contactos 
            WHERE strftime('%m-%d', fecha_nacimiento) = ?
            AND (ultimo_correo_enviado IS NULL OR ultimo_correo_enviado != ?)
        """, (hoy.strftime('%m-%d'), hoy.isoformat()))
        
        cumplea√±eros = cursor.fetchall()
        conn.close()

        if cumplea√±eros:
            print(f"üéÇ Encontrados {len(cumplea√±eros)} cumplea√±os para hoy")
            
            for contacto in cumplea√±eros:
                contacto_id, nombre, apellido, correo, celular, fecha_nacimiento = contacto
                
                try:
                    edad = calcular_edad(fecha_nacimiento)
                    asunto = f"¬°Feliz Cumplea√±os {nombre}! üéÇ"
                    mensaje_correo = crear_mensaje_cumpleanos(nombre, apellido, edad)
                    
                    # Enviar correo electr√≥nico
                    success_correo, result_correo = enviar_correo(correo, asunto, mensaje_correo)
                    
                    # Inicializar variables para WhatsApp
                    success_whatsapp = False
                    result_whatsapp = "No se envi√≥ WhatsApp (celular no proporcionado)"
                    
                    # Enviar WhatsApp si hay un n√∫mero de celular registrado
                    if celular and celular.strip():
                        mensaje_whatsapp = crear_mensaje_whatsapp(nombre, apellido, edad)
                        success_whatsapp, result_whatsapp = enviar_whatsapp(celular, mensaje_whatsapp)
                    
                    if success_correo or success_whatsapp:
                        conn = sqlite3.connect(DB_NAME)
                        cursor = conn.cursor()
                        
                        # Registrar el correo enviado
                        if success_correo:
                            cursor.execute("""
                                INSERT INTO historial_correos (contacto_id, tipo, asunto, mensaje)
                                VALUES (?, ?, ?, ?)
                            """, (contacto_id, 'correo_cumpleanos_auto', asunto, mensaje_correo))
                        
                        # Registrar el WhatsApp enviado
                        if success_whatsapp:
                            cursor.execute("""
                                INSERT INTO historial_correos (contacto_id, tipo, asunto, mensaje)
                                VALUES (?, ?, ?, ?)
                            """, (contacto_id, 'whatsapp_cumpleanos_auto', 'Mensaje WhatsApp', mensaje_whatsapp))
                        
                        cursor.execute("""
                            UPDATE contactos SET ultimo_correo_enviado = ? WHERE id = ?
                        """, (hoy.isoformat(), contacto_id))
                        
                        conn.commit()
                        conn.close()
                        
                        print(f"‚úÖ Mensajes autom√°ticos enviados a {nombre} {apellido}: Correo: {success_correo}, WhatsApp: {success_whatsapp}")
                    else:
                        print(f"‚ùå Error enviando mensajes autom√°ticos a {nombre}: Correo: {result_correo}, WhatsApp: {result_whatsapp}")
                        
                except Exception as e:
                    print(f"üí• Error procesando {nombre}: {str(e)}")
        else:
            print("üìÖ No hay cumplea√±os para hoy")

    except Exception as e:
        print(f"üí• Error en revisi√≥n autom√°tica: {str(e)}")

def iniciar_programador():
    """Iniciar el programador de tareas autom√°ticas"""
    # Programar revisi√≥n diaria a las 9:00 AM
    schedule.every().day.at("09:00").do(revisar_cumpleanos_automatico)
    
    # Tambi√©n revisar cada hora durante el d√≠a laboral
    schedule.every().hour.do(revisar_cumpleanos_automatico)
    
    def ejecutar_programador():
        while True:
            schedule.run_pending()
            time.sleep(60)  # Revisar cada minuto
    
    # Ejecutar programador en hilo separado
    hilo_programador = threading.Thread(target=ejecutar_programador, daemon=True)
    hilo_programador.start()
    print("‚è∞ Programador autom√°tico iniciado")

@app.route('/test')
def test():
    """Endpoint de prueba"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM contactos")
    total_contactos = cursor.fetchone()[0]
    conn.close()
    
    return jsonify({
        'message': 'Sistema de cumplea√±os funcionando correctamente',
        'status': 'OK',
        'base_datos': 'Conectada',
        'total_contactos': total_contactos,
        'correo_origen': CORREO_ORIGEN,
        'whatsapp': 'Configurado',
        'notificaciones': ['Correo electr√≥nico', 'WhatsApp']
    })

if __name__ == '__main__':
    print("üöÄ Iniciando Sistema de Cumplea√±os Autom√°tico...")
    
    # Inicializar base de datos
    init_database()
    
    # Iniciar programador autom√°tico
    iniciar_programador()
    
    print("üìß Correo origen configurado:", CORREO_ORIGEN)
    print("üì± WhatsApp habilitado para contactos con celular")
    print("   - Prefijos soportados: Espa√±a (+34), Ecuador (+593), M√©xico (+52), Colombia (+57), etc.")
    print("   - Formatos aceptados: +34612345678, 612345678 (Espa√±a), 09XXXXXXXX (Ecuador)")
    print("   - NOTA: WhatsApp abre el navegador y requiere confirmar manualmente presionando Enter")
    print("   - Para probar n√∫meros: python probar_whatsapp.py <numero>")
    print("üåê Servidor disponible en: http://localhost:5000")
    print("üìã Endpoints disponibles:")
    print("   GET  / - Frontend principal")
    print("   POST /registrar-contacto - Registrar nuevo contacto")
    print("   POST /revisar-cumpleanos - Revisar cumplea√±os manualmente")
    print("   GET  /obtener-contactos - Listar contactos")
    print("   GET  /historial - Ver historial de correos/mensajes")
    print("   GET  /test - Probar sistema")
    print("‚è∞ Revisi√≥n autom√°tica programada cada hora y a las 9:00 AM")
    print("üí¨ Los mensajes de WhatsApp necesitan WhatsApp Web activo")
    print("=" * 60)
    
    try:
        app.run(debug=True, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nüëã Sistema detenido por el usuario")